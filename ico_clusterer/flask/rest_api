import datetime
import pickle
import pandas as pd
import numpy as np

from flask import Flask, jsonify
from core.ml import generate_ico_models, ico_industries
from flask import request
from core.utilities import reset_system
from core.constants import raw_data_file


app = Flask(__name__)


@app.route('/')
def index():
    return "Hello, World from [company_name]!"


@app.route('/save_models', methods=['GET'])
def generate_models():
    reset_system()
    raw_ico_data = pd.read_csv(raw_data_file)
    generate_ico_models(raw_ico_data, save=True)

    return "Models saved!"


@app.route('/investigate_ico', methods=['GET'])
def investigate_ico():
    now = datetime.datetime.now()

    timestamp = str(now.year) + str(now.month).zfill(2) + str(now.day).zfill(2)
    path_to_file = '../models/'
    ann_model_filename = 'classifier_' + timestamp + '.pickle'
    full_path = path_to_file + ann_model_filename

    with open(full_path, 'rb') as f:
        ann_model = pickle.load(f)

    age_days = request.args.get('age_days', default=448, type=int)
    region = request.args.get('region', default=7, type=int)
    hardcap = request.args.get('hardcap', default=15000000, type=int)
    telegram = request.args.get('telegram', default=14000, type=int)
    team = request.args.get('team', default=15, type=int)
    N_google_news = request.args.get('N_google_news', default=1, type=int)
    N_twitter = request.args.get('N_twitter', default=165000, type=int)
    price = request.args.get('price', default=0.5, type=float)
    industry = request.args.get('industry', default='blockchain', type=str)

    x = np.array([age_days,region,hardcap,telegram,team,N_google_news,N_twitter,price,ico_industries.index(industry)])
    ico_classification = ann_model.predict(x.reshape(1, -1))

    return jsonify(ico_classification.tolist())


if __name__ == '__main__':
    app.run(debug=True)