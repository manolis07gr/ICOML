/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import PropTypes from 'prop-types';
import LegendSvgItem from './LegendSvgItem';
import { computeDimensions } from '../compute';
import { DIRECTION_COLUMN, DIRECTION_ROW, DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_TOP_TO_BOTTOM, DIRECTION_BOTTOM_TO_TOP } from '../constants';

var LegendSvg = function LegendSvg(_ref) {
    var data = _ref.data,
        x = _ref.x,
        y = _ref.y,
        direction = _ref.direction,
        _padding = _ref.padding,
        justify = _ref.justify,
        itemWidth = _ref.itemWidth,
        itemHeight = _ref.itemHeight,
        itemDirection = _ref.itemDirection,
        itemsSpacing = _ref.itemsSpacing,
        symbolSize = _ref.symbolSize,
        symbolSpacing = _ref.symbolSpacing,
        symbolShape = _ref.symbolShape;

    var _computeDimensions = computeDimensions({
        itemCount: data.length,
        itemWidth: itemWidth,
        itemHeight: itemHeight,
        itemsSpacing: itemsSpacing,
        direction: direction,
        padding: _padding
    }),
        width = _computeDimensions.width,
        height = _computeDimensions.height,
        padding = _computeDimensions.padding;

    var xStep = 0;
    var yStep = 0;
    if (direction === DIRECTION_ROW) {
        xStep = itemWidth + itemsSpacing;
    } else if (direction === DIRECTION_COLUMN) {
        yStep = itemHeight + itemsSpacing;
    }

    return React.createElement(
        'g',
        { transform: 'translate(' + x + ',' + y + ')' },
        data.map(function (_ref2, i) {
            var label = _ref2.label,
                fill = _ref2.fill;
            return React.createElement(LegendSvgItem, {
                key: i,
                x: i * xStep + padding.left,
                y: i * yStep + padding.top,
                width: itemWidth,
                height: itemHeight,
                symbolSize: symbolSize,
                symbolSpacing: symbolSpacing,
                symbolShape: symbolShape,
                direction: itemDirection,
                justify: justify,
                label: label,
                fill: fill
            });
        })
    );
};

LegendSvg.propTypes = {
    data: PropTypes.arrayOf(PropTypes.shape({
        label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
        fill: PropTypes.string.isRequired
    })).isRequired,

    // position/layout
    x: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired,
    direction: PropTypes.oneOf([DIRECTION_COLUMN, DIRECTION_ROW]).isRequired,
    padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
        top: PropTypes.number,
        right: PropTypes.number,
        bottom: PropTypes.number,
        left: PropTypes.number
    })]).isRequired,
    justify: PropTypes.bool.isRequired,

    // items
    itemWidth: PropTypes.number.isRequired,
    itemHeight: PropTypes.number.isRequired,
    itemDirection: PropTypes.oneOf([DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_TOP_TO_BOTTOM, DIRECTION_BOTTOM_TO_TOP]).isRequired,
    itemsSpacing: PropTypes.number.isRequired,
    symbolSize: PropTypes.number,
    symbolSpacing: PropTypes.number,
    symbolShape: PropTypes.oneOfType([PropTypes.string, PropTypes.func])
};

LegendSvg.defaultProps = {
    // position/layout
    padding: 0,
    justify: false,

    // items
    itemDirection: DIRECTION_LEFT_TO_RIGHT,
    itemsSpacing: 0
};

export default LegendSvg;